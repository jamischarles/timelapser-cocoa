name: Build, Sign, and Release macOS App

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

env:
  APP_NAME: "TimelapseCreator"
  BUNDLE_ID: "com.example.timelapsecreator"

jobs:
  build-sign-and-release:
    runs-on: macos-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install create-dmg
          npm install -g @electron/notarize

      # Set up Apple Certificate and Provisioning Profile
      - name: Install Apple Certificate
        if: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build Release App
        run: |
          echo "Building Release version..."
          swift build -c release
          
          # Create .app bundle structure
          mkdir -p "build/${{ env.APP_NAME }}.app/Contents/MacOS"
          mkdir -p "build/${{ env.APP_NAME }}.app/Contents/Resources"
          
          # Copy executable
          cp ".build/release/${{ env.APP_NAME }}" "build/${{ env.APP_NAME }}.app/Contents/MacOS/"
          
          # Copy app icon if it exists
          if [ -f "TimelapseCreator/Resources/Assets.xcassets/AppIcon.appiconset/icon_512x512.png" ]; then
            cp "TimelapseCreator/Resources/Assets.xcassets/AppIcon.appiconset/icon_512x512.png" "build/${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.icns"
          fi
          
          # Create Info.plist with entitlements
          cat > "build/${{ env.APP_NAME }}.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${{ env.APP_NAME }}</string>
              <key>CFBundleIdentifier</key>
              <string>${{ env.BUNDLE_ID }}</string>
              <key>CFBundleName</key>
              <string>${{ env.APP_NAME }}</string>
              <key>CFBundleVersion</key>
              <string>${{ github.event.release.tag_name || github.event.inputs.tag }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.event.release.tag_name || github.event.inputs.tag }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>12.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Code Sign App
        if: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
        run: |
          # Sign the app bundle
          codesign --sign "$CODESIGN_IDENTITY" \
            --options runtime \
            --timestamp \
            --deep \
            --force \
            "build/${{ env.APP_NAME }}.app"
          
          # Verify signing
          codesign --verify --verbose "build/${{ env.APP_NAME }}.app"

      - name: Create DMG
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }} Installer" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 175 120 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 425 120 \
            "build/${{ env.APP_NAME }}-${{ github.event.release.tag_name || github.event.inputs.tag }}.dmg" \
            "build/${{ env.APP_NAME }}.app"

      - name: Code Sign DMG
        if: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        env:
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
        run: |
          codesign --sign "$CODESIGN_IDENTITY" \
            --timestamp \
            "build/${{ env.APP_NAME }}-${{ github.event.release.tag_name || github.event.inputs.tag }}.dmg"

      - name: Notarize DMG
        if: ${{ secrets.APPLE_ID && secrets.APPLE_APP_SPECIFIC_PASSWORD && secrets.APPLE_TEAM_ID }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Submit for notarization
          xcrun notarytool submit \
            "build/${{ env.APP_NAME }}-${{ github.event.release.tag_name || github.event.inputs.tag }}.dmg" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "build/${{ env.APP_NAME }}-${{ github.event.release.tag_name || github.event.inputs.tag }}.dmg"

      - name: Upload DMG to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: build/*.dmg
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload DMG as Artifact (Manual trigger)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-dmg-signed
          path: build/*.dmg

      - name: Clean up keychain
        if: ${{ always() && secrets.BUILD_CERTIFICATE_BASE64 }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true 